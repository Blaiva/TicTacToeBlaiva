@page "/partidas/edit/{PartidaId:int}"

@inject PartidasService partidasService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Editar Partida</PageTitle>

<EditForm Model="Partida" OnValidSubmit="Modificar">
	<DataAnnotationsValidator/>
	<ValidationSummary/>

	<div class="container">
		<div class="card shadow-lg">

			@*Header*@
			<div class="card-header text-center">
				<h5 class="card-title">Editar Partida</h5>
			</div>

			@*Body*@
			<div  class="card-body">
				<div class="mb-3">
					<label class="form-label"><strong>PartidaId</strong></label>
					<InputNumber class="form-control" @bind-Value="Partida.PartidaId" readonly/>
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Jugador1Id</strong></label>
					<InputNumber class="form-control" @bind-Value="Partida.Jugador1Id" readonly />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Jugador2Id</strong></label>
					<InputNumber class="form-control" @bind-Value="Partida.Jugador2Id" readonly/>
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>EstadoPartida</strong></label>
					<InputText class="form-control" @bind-Value="Partida.EstadoPartida" readonly/>
					<ValidationMessage For="@(() => Partida.EstadoTablero)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>GanadorId</strong></label>
					<InputNumber class="form-control" @bind-value="Partida.GanadorId" readonly/>
					<ValidationMessage For="@(() => Partida.GanadorId)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>TurnoId</strong></label>
					<InputNumber class="form-control" @bind-value="Partida.TurnoJugadorId" readonly/>
					<ValidationMessage For="@(() => Partida.TurnoJugadorId)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>EstadoTablero</strong></label>
					<InputText class="form-control" @bind-Value="Partida.EstadoTablero" readonly/>
					<ValidationMessage For="@(() => Partida.EstadoTablero)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>FechaInicio</strong></label>
					<InputDate class="form-control" @bind-Value="Partida.FechaInicio" readonly></InputDate>
					<ValidationMessage For="@(() => Partida.FechaInicio)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>FechaFin</strong></label>
					<InputDate class="form-control" @bind-Value="Partida.FechaFin" readonly></InputDate>
					<ValidationMessage For="@(() => Partida.FechaFin)" />
				</div>

				@if (!string.IsNullOrEmpty(AlertMessage))
				{
					<div class="alert alert-@AlertType alert-dismissible fade show" role="alert">
						<div>@AlertMessage</div>
					</div>
				}
			</div>

			@*Footer*@
			<div class="card-footer text-center mt-2">
				<div class="btn-group">
					@if (!(AlertType == "success"))
					{
						@* <button type="submit" class="btn btn-outline-success bi bi-check-circle" @onclick="Modificar"> Modificar</button> *@
						<button type="button" class="btn btn-outline-danger bi bi-trash-fill" @onclick="Eliminar"> Eliminar</button>
						@if (Partida.EstadoPartida == "En Curso")
						{
							<button type="button" class="btn btn-outline-primary bi bi-play-fill" @onclick="Reanudar"> Reanudar</button>
						}
					}
					<a href="/partidas/index" class="btn btn-outline-secondary bi bi-arrow-bar-left"> Volver</a>
				</div>
			</div>
		</div>
	</div>
</EditForm>


@code {
	[Parameter]
	public int PartidaId { get; set; }

	public Partidas Partida { get; set; } = new Partidas();
	public string AlertType { get; set; }
	public string AlertMessage { get; set; }


	protected async override Task OnInitializedAsync()
	{
		Partida = await partidasService.Buscar(PartidaId);
	}

	public async Task Modificar()
	{
		var modificado = await partidasService.Modificar(Partida);
		if (modificado)
		{
			AlertMessage = "Partida modificado correctamente.";
			AlertType = "success";
		}
		else
		{
			AlertMessage = "Error al modificar el partida.";
			AlertType = "danger";
		}
	}

	public async Task Eliminar()
	{
		var eliminado = await partidasService.Eliminar(PartidaId);
		if (eliminado)
		{
			AlertMessage = "Partida eliminado correctamente.";
			AlertType = "success";
		}
		else
		{
			AlertMessage = "Error al eliminar el partida.";
			AlertType = "danger";
		}
	}

	public async Task Reanudar()
	{
		navigationManager.NavigateTo("/game/" + Partida.PartidaId);
	}
}
